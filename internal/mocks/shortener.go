// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/bezjen/shortener/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Shortener is an autogenerated mock type for the Shortener type
type Shortener struct {
	mock.Mock
}

// GenerateShortURLPart provides a mock function with given fields: ctx, url
func (_m *Shortener) GenerateShortURLPart(ctx context.Context, url string) (string, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for GenerateShortURLPart")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateShortURLPartBatch provides a mock function with given fields: ctx, urls
func (_m *Shortener) GenerateShortURLPartBatch(ctx context.Context, urls []model.ShortenBatchRequestItem) ([]model.ShortenBatchResponseItem, error) {
	ret := _m.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for GenerateShortURLPartBatch")
	}

	var r0 []model.ShortenBatchResponseItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.ShortenBatchRequestItem) ([]model.ShortenBatchResponseItem, error)); ok {
		return rf(ctx, urls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.ShortenBatchRequestItem) []model.ShortenBatchResponseItem); ok {
		r0 = rf(ctx, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ShortenBatchResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.ShortenBatchRequestItem) error); ok {
		r1 = rf(ctx, urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLByShortURLPart provides a mock function with given fields: ctx, shortURLPart
func (_m *Shortener) GetURLByShortURLPart(ctx context.Context, shortURLPart string) (string, error) {
	ret := _m.Called(ctx, shortURLPart)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByShortURLPart")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortURLPart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortURLPart)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortURLPart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingRepository provides a mock function with given fields: ctx
func (_m *Shortener) PingRepository(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PingRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewShortener creates a new instance of Shortener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShortener(t interface {
	mock.TestingT
	Cleanup(func())
}) *Shortener {
	mock := &Shortener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
